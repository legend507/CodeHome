Q:说是如何实现一个高效的算法，能够找出用户周围距离最近的地铁站（用户的位置已知）。

我最初说了根据地铁站和用户的坐标计算所有地铁站到用户的距离，然后找最小的。
面试官提示说这样太慢，而且需要考虑用户与地铁站之间有建筑物遮挡的情况。

A* search algorithm?

--------------------------------------------------------------------------------------------------------------
Q:每一种语言，都有自己的字母表，类似英文的a-z，但是顺序不相同。例如，有的语言可能是z是第一个之类的。
现在给定这个语言的字典，请分析这个字典，得到这个语言的字母表的顺序。 例如：有如下的字母：
	1. C
	2. CAC
	3. CB
	4. BCC
	5. BA
经过分析，得到字母表为C->B->A


* 字典其实隐含了字母的顺序的
这个是很自然的，如果没有想到这一点，这个题目任意解都可以的。而字典有序，是可以作为一个常识的。
我们延续题目中的例子进行分析。
首先，C一定是在B之前的，这个是由字典本身的属性决定的。那么剩下的如何考虑呢？比较完第一个字母不同的情况，
则比较第一个字母相同的情况。
考虑C和CA，根据我们的经验，A一定是在C后面的，如果A在C的前面，则应该是CA，C的顺序。这样：
	* 根据C和CAC，我们得到C->A(表示C在A的前面，后面同理)
	* 根据CAC和CB，我们得到A->B
	* 根据CB和BCC，我们得到C->B
综合，我们有C->A,A->B,C->B这三个关系，但是，还没有结束。根据这三组关系，如何得到CAB的关系呢？ 
这三组关系，构成了一个有向无环图，很自然就想要要用拓扑排序得到CAB之间的整体排序。
拓扑排序的算法，不在这里详述，总结一下这个题目的思路：
	* 构建有向无环图：按照字典中单词的顺序，每两个进行比较，找到第一对不相同的字母，确定他们的顺序
	* 对有向无环图进行拓扑排序
构建有向无环图的时间复杂度为O(N*M)，N是字典中单词数目，M是单词长度；有向图拓扑排序的时间复杂度是O(|V|+|E|)。
-----------------------------------------------------------------------------------------------------------------
Q:有原数组S和目标数组T两个数组，它们分别是0-n-1 n个数字的某一种排列的结果。
请给出程序，完成从S到T的变换，注意：只允许使用一种操作：数组中的其他元素可以0交换。
例如：S={0,1,2}，T={0,2,1}。变换过程中，只允许1和2于0进行交换。
下面是一种可行方法：{0,1,2}=>{2,1,0}=>{2,0,1}=>{0,2,1}

要变换到T数组，就要知道S数组中的值，再T数组中的位置。则有P数组，P[s]表示，T数组中值s的位置， 用p0表示0的位置。
如，对于T={0,2,1}而言，P数组如下：
s	0	2	1
i	0	1	2
则对S数组进行扫描，找到第一个于T数组中相应数字不相等的数a，a不为0，
S	0	1	2
T	0	2	1
则a=1，位置为index。查找P，a在T中的位置为2。如果要把a换到2的位置，则要先把2的位置中的元素换走，及首先swap(S[p0], S[P[a]])，
然后swap(S[index], S[p0])。此时p0已经更新为S[P[a]]。两次交换，即找到a=1的最终位置。得到如下的表格：
S	2	0	1
T	0	2	1
重复扫描S数组，找到第一个不相同的元素，a=2，位置为index，查找P[a]=0，则表明，直接swap(S[index],S[p0])即可。
最终得到:
S	0	2	1
T	0	2	1
上面的思路，是首先考虑在目标数组中的位置，那把原来数组中的这个位置的腾出来，即可。同样的，也可以反过来考虑，
思路是相同的，大家可以自己画画表格。
如果这个题目，进一步问，要使用最少的交换次数，该如何处理呢？按照如下方式构造图
    数组中的n个元素的每一种排列方式，都是图中的一个节点
    如果一个节点所代表的排列方式，通过题目中的一次变换，可以得到另一个节点，则两个节点之间，存在一条边
剩下就是求图中最短路径。具体过程，留给大家了。
